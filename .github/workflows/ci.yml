name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.16'
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build
      env:
        CGO_ENABLED: '0'
      run: go build -v
    - name: Test
      shell: python
      env:
        PASSWORD: password
      run: |
        import base64
        import os
        from subprocess import PIPE, run

        def goenc(args, input):
            return run(['./goenc'] + args, input=input, stdout=PIPE, check=True).stdout

        ciphertext = base64.b64decode("""
        AQgAAAAAABAABFkVTScVNMr2euF8TzNIyBSi8KfktCPlkskkRPzhVPA2ZAygHpLBt474YbWJARBs
        SCiNiIaQEflH3fALH7Cm4pWTgi43aP3QJL2Q
        """)
        assert goenc(['-d'], input=ciphertext) == b"The secret message"

        plaintext = os.urandom(1024)
        assert goenc(['-d'], input=goenc([], input=plaintext)) == plaintext
        assert goenc(['-d'], input=goenc(['-t2', '-m128M', '-p2'], input=plaintext)) == plaintext

  create-release:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
    - id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: true

  release:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        GOOS: [windows, darwin, linux]
        GOARCH: [amd64]
        include:
        - GOOS: android
          GOARCH: arm64

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.16'
    - id: build
      name: Build
      env:
        CGO_ENABLED: '0'
        GOOS: ${{ matrix.GOOS }}
        GOARCH: ${{ matrix.GOARCH }}
      run: |
        ARTIFACT_DIR="goenc-${GOOS}-${GOARCH}-${GITHUB_REF#refs/tags/v}"
        mkdir "${ARTIFACT_DIR}"
        go install -trimpath -ldflags "-s -w" "github.com/${GITHUB_REPOSITORY}@${GITHUB_REF#refs/tags/}"
        cp LICENSE README.md "${ARTIFACT_DIR}"
        case "${GOOS}/${GOARCH}" in
          linux/amd64)
            cp "$(go env GOPATH)/bin/goenc" "${ARTIFACT_DIR}" ;;
          windows/*)
            cp "$(go env GOPATH)/bin/${GOOS}_${GOARCH}/goenc.exe" "${ARTIFACT_DIR}" ;;
          */*)
            cp "$(go env GOPATH)/bin/${GOOS}_${GOARCH}/goenc" "${ARTIFACT_DIR}" ;;
        esac
        case "${GOOS}/${GOARCH}" in
          windows/*)
            zip "${ARTIFACT_DIR}.zip" "${ARTIFACT_DIR}"/*
            echo "::set-output name=asset-name::${ARTIFACT_DIR}.zip"
            echo "::set-output name=asset-content-type::application/zip"
            ;;
          *)
            tar zcf "${ARTIFACT_DIR}.tar.gz" "${ARTIFACT_DIR}"
            echo "::set-output name=asset-name::${ARTIFACT_DIR}.tar.gz"
            echo "::set-output name=asset-content-type::application/gzip"
            ;;
        esac
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.build.outputs.asset-name }}
        asset_name: ${{ steps.build.outputs.asset-name }}
        asset_content_type: ${{ steps.build.outputs.asset-content-type }}
